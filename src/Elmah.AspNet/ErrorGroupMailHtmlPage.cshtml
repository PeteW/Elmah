@* Generator: Template TypeVisibility: Internal *@
@using System
@using System.Collections.Generic
@using System.Collections.Specialized
@using System.Linq
@using Elmah
@inherits RazorTemplateBase
@{
    // NB cast is not really required, but aids with intellisense!
    var errorGroup = (ErrorGroup) this.ErrorGroup;
}
<html>
    <head>
        <style type="text/css">
            body { font-family: verdana, arial, helvetic; font-size: x-small; }
            table.collection { border-collapse: collapse; border-spacing: 0; border: 1px solid black; width: 100% }
            table.collection tr { vertical-align: top; }
            table.collection th { text-align: left; border: 1px solid black; padding: 4px; font-weight: bold; }
            table.collection td { border: 1px solid black; padding: 4px; }
            td, th, pre { font-size: x-small; } 
            #errorDetail { padding: 1em; background-color: #FFFFCC; } 
            #errorMessage { font-size: medium; font-style: italic; color: maroon; }
            h1 { font-size: small; }
        </style>
    </head>
    <body>
        <p id="errorMessage">Errors and Frequencies</p>
            <table class="collection">
                <tr>
                    <th> Type / Message </th>
                    <th width="15%"> Details </th>
                </tr>
        @foreach (var errorTypeAndMessage in errorGroup.Errors
            .GroupBy(x => x.Type.ToString() + ": " + x.Message)
            .OrderByDescending(x => x.Count()))
        {
            <tr>
                <td> @errorTypeAndMessage.Key
@* NOTE! DO NOT REMOVE this comment
   Eliminates white space literal prior to pre tag in generated 
   code and is important for correct formatting
            *@<pre id="errorDetail">@errorTypeAndMessage.First().Detail</pre>
                </td>
                <td>
                    <ul>
                        <li> <strong>Count</strong> @errorTypeAndMessage.Count() </li>
                        <li> <strong>Min-Time</strong> @errorTypeAndMessage.Min(x => x.Time)</li>
                        <li> <strong>Max-Time</strong> @errorTypeAndMessage.Max(x => x.Time)</li>
                    </ul>
                </td>
            </tr>    
        }
            </table>
    @{
            var groupedServerVariables = new Dictionary<string, List<string>>();
            foreach (var error in errorGroup.Errors.OrderBy(x => x.Time))
            {
                for(var i = 0; i < error.ServerVariables.Count; i++)
                {
                    var key = error.ServerVariables.GetKey(i);
                    var value = error.ServerVariables[i];
                    if (!groupedServerVariables.ContainsKey(key))
                    {
                        groupedServerVariables.Add(key, new List<string>());
                    }
                    groupedServerVariables[key].Add(value);
                }
            }
        }
            <div id="ServerVariables">
                <h1>Server Variables</h1>
                <table class="collection">
                    <tr><th>Name</th>            
                        <th>Value</th></tr>
                    @foreach(var groupedServerVariable in groupedServerVariables)
             {
                 <tr><td>@groupedServerVariable.Key</td>
                     <td>
                         <table class="collection">
                             @foreach (var val in groupedServerVariable.Value.Distinct())
                             {
                                 <tr><td>@val</td></tr>
                             }
                         </table>
                     </td></tr>
             }
                </table>
            </div>
        <p>@(RenderPartial<PoweredBy>())</p>
    </body>
</html>
